using MessagePack.Resolvers;
using MessagePack;
using ClientLib.MP.Resolvers;
using MagicOnion.Client;
using Grpc.Core;
using ClientLib.MagicOnion;
using System;

namespace ClientLib
{
    public class Startup
    {
        private static IMyFirstService MyFirstService;

        public static void Init()
        { 
            MagicOnionInitializer.Register();
            // NOTE: Currently, CompositeResolver doesn't work on Unity IL2CPP build. Use StaticCompositeResolver instead of it.
            StaticCompositeResolver.Instance.Register(
                // This resolver is generated by MagicOnion's code generator.
                //ClientLib.MagicOnion.Resolvers.MagicOnionResolver.Instance,
                // This resolver is generated by MessagePack's code generator.
                MPResolver.Instance,
                StandardResolver.Instance
            );

            MessagePackSerializer.DefaultOptions = MessagePackSerializer.DefaultOptions
                .WithResolver(StaticCompositeResolver.Instance);

            var channel = new Channel("localhost", 5001, ChannelCredentials.Insecure);

            MyFirstService = MagicOnionClient.Create<IMyFirstService>(channel);
        }


        public static int Sum(int x, int y)
        {
           Console.WriteLine("Client sum called");
           return MyFirstService.SumAsync(x, y).GetAwaiter().GetResult();
        }
    }
}
